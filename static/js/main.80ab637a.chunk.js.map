{"version":3,"sources":["components/DailyPicture.jsx","key.js","components/SearchNasa.jsx","components/NavBar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DailyPicture","useState","pic","setPic","Date","toISOString","slice","date","setDate","getPicture","a","Axios","get","resp","data","console","log","useEffect","Row","Col","md","htmlFor","type","id","onChange","e","target","value","name","Image","src","hdurl","fluid","SearchNasa","images","setImages","search","setSearch","searchNasa","collection","items","className","Form","Group","Control","size","placeholder","map","x","i","lg","sm","Card","key","links","Img","variant","href","Body","Title","title","photographer","Subtitle","Text","description","NavBar","Nav","as","Item","Link","to","App","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80ab637a.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Axios from 'axios';\r\nimport key from \"../key\";\r\nimport {Image, Row, Col} from \"react-bootstrap\";\r\n\r\nconst DailyPicture = () => {\r\n    const formatDate = () => new Date().toISOString().slice(0, 10);\r\n    const [pic, setPic] = useState(null);\r\n    const [date, setDate] = useState(formatDate)\r\n    const getPicture = async () => {\r\n        const resp = await Axios.get(`https://api.nasa.gov/planetary/apod?api_key=${key}&hd=true&date=${date}`);\r\n        setPic(resp.data);\r\n        console.log(resp.data, date);\r\n    };\r\n    useEffect(() => {\r\n        getPicture();\r\n    }, [date]);\r\n    return (<Row>\r\n        <Col md={6}>\r\n            <label htmlFor=\"date\">Choose a date</label>\r\n        </Col>\r\n        <Col md={6}>\r\n            <input type=\"date\" id=\"date\" onChange={(e) => setDate(e.target.value)} name=\"date\"/>\r\n        </Col>\r\n        {pic && <Col md={12}>\r\n            <Image src={pic.hdurl} fluid/>\r\n        </Col>}\r\n    </Row>)\r\n};\r\n\r\nexport default DailyPicture;\r\n","const key = '6SvhZ4AuPuoFonWmLKeWmszlTHDOguxUN7X1c51P';\r\nexport default key;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport Axios from \"axios\";\r\nimport {Row, Col, Card, Form} from \"react-bootstrap\";\r\n\r\nconst SearchNasa = () => {\r\n    const [images, setImages] = useState(null);\r\n    const [search, setSearch] = useState('apollo 11')\r\n    const searchNasa = async () => {\r\n        const resp = await Axios.get(`https://images-api.nasa.gov/search?q=${search}`);\r\n        console.log(resp.data.collection)\r\n        setImages(resp.data.collection.items);\r\n    };\r\n    useEffect(() => {\r\n        searchNasa();\r\n    }, [search])\r\n    return (<Row>\r\n        <Col md={6}><h2 className={'text-primary'}>Search:</h2></Col>\r\n        <Col md={6}>\r\n            <Form.Group>\r\n                <Form.Control size=\"lg\" type=\"text\" placeholder={`ex: ${search}`} onChange={(e) => setSearch(e.target.value)}/>\r\n            </Form.Group>\r\n        </Col>\r\n        {images && images.map((x, i) => (<Col md={6} lg={4} sm={12}>\r\n            <Card key={i} className={'mt-4'}>\r\n                {x.links && <Card.Img variant=\"top\" src={x.links[0].href}/>}\r\n                <Card.Body>\r\n                    <Card.Title className={'text-primary'}>{x.data[0].title}</Card.Title>\r\n                    {x.data[0].photographer && <Card.Subtitle className=\"mb-2 text-muted\">Photograph: {x.data[0].photographer}</Card.Subtitle>}\r\n                    <Card.Text className={'text-success'}>{x.data[0].description}</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>))}\r\n    </Row>);\r\n};\r\n\r\nexport default SearchNasa;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Nav} from \"react-bootstrap\";\r\n\r\nconst NavBar = () => {\r\n    return (<header>\r\n        <Nav className={'bg-primary'} as=\"ul\">\r\n            <Nav.Item as=\"li\">\r\n                <Nav.Link>\r\n                    <Link to={'/search'}>\r\n                        <h2>Search</h2>\r\n                    </Link>\r\n                </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item as=\"li\">\r\n                <Nav.Link>\r\n                    <Link to={'/'}>\r\n                        <h2>Daily Picture</h2>\r\n                    </Link>\r\n                </Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n    </header>)\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\nimport DailyPicture from \"./components/DailyPicture\";\nimport {Container} from \"react-bootstrap\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport SearchNasa from \"./components/SearchNasa\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n    return (<Router>\n        <NavBar/>\n        <Container className=\"App\">\n            <Switch>\n                <Route path=\"/search\">\n                    <SearchNasa/>\n                </Route>\n                <Route path=\"/\">\n                    <DailyPicture/>\n                </Route>\n            </Switch>\n        </Container>\n    </Router>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}